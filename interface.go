package errors

import (
	stderr "errors"
	"fmt"
)

type Error interface {
	/*
		Error - стандартный интерфейс ошибки.

		* Возвращает исходный текст, переданный в конструктор
		* Если был вызов WithArgs, возвращает форматированный исходный текст
	*/
	error

	/*
		Format - стандартный интерфейс форматирования в консоль.

		* Выводит сначала собственное сообщение, а затем все сообщения по цепочке, разделенные знаком `<-`
		*
	*/
	fmt.Formatter

	/*
		Item - отладочный объект.

		* Возвращает в точности то же, что было передано в WithItem
		* Если WithItem не использовалась, возвращает nil
	*/
	Item() interface{}

	/*
		Args - список аргументов для форматирования.

		* Возвращает в точности то же, что было передано в WithArgs
		* Если WithArgs не использовалась, возвращает nil
	*/
	Args() []interface{}

	/*
		Is - сравнение с ошибками в цепочке.

		* Перегрузка логики сравнения для использования со стандартным errors.Is
		* Если передан nil, возвращает false
		* Сначала сравнение на прямое равенство, затем по сообщению Error()
		* После - аналогичное сравнение с прототипом (если он быть создан с помощью With*)
		* Если был WithReason, то сравнение идет дальше по цепочке
	*/
	Is(err error) bool

	Unwrap() error

	/*
		WithStack - формирование стека вызовов для локализации ошибки.

		* Стек только в текущей горутине выполнения
		* Для избежания проблем с гонками при обновлении, делает копию шаблонной ошибки
		* Если стек уже собран и копия выполнена, повторный вызов не меняет содержимого
		* Напрямую вызывается только если не нужны ни причина, ни форматирование
	*/
	WithStack() Error

	/*
		WithReason - добавление исходной ошибки для понимания причин возникновения (аналог xerrors.Wrap).

		* Добавляет указанную ошибку в цепочку
		* Автоматически вызывает WithStack
	*/
	WithReason(err error) Error

	/*
		WithArgs - добавление аргументов для форматирования сообщения.

		* Устанавливает список для выдачи в Args
		* Использует исходный текст ошибки из New как форматную строку
		* Автоматически вызывает WithStack
	*/
	WithArgs(args ...interface{}) Error

	/*
		WithItem - добавление объекта отладочных данных.

		* Устанавливает объект отладки для выдачи в Item
		* Использует исходный текст ошибки из New как форматную строку
		* Автоматически вызывает WithStack
	*/
	WithItem(item interface{}) Error
}

func As(err error, target interface{}) bool { return stderr.As(err, target) }
func Is(err, target error) bool             { return stderr.Is(err, target) }
func New(text string) Error                 { return newErrorV1(text) }
func Unwrap(err error) error                { return stderr.Unwrap(err) }
